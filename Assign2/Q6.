// (A)
#include<iostream>
using namespace std;

int sparseMatrix(int arr[10][10],int rows,int cols,int sparse[50][3]){
    int k=1;
    int size =0;

    for(int i=0;i<rows;i++){
        for(int j=0;j<cols;j++){
            if(arr[i][j] != 0){
                size++;
            }
        }
    }

    sparse[0][0] = rows;
    sparse[0][1] = cols;
    sparse[0][2] = size+1;

    // ? sparse matrix
    for(int i=0;i<rows;i++){
        for(int j=0;j<cols;j++){
            if(arr[i][j] != 0){
                sparse[k][0] = i;
                sparse[k][1] = j;
                sparse[k][2] = arr[i][j];
                k++;
            }
        }
    }
    return size + 1;
}

void display(int sparse[50][3],int size){
    cout << "Sparse matrix = " << endl;
    for (int i=0;i<size;i++){
        for(int j=0;j<3;j++){
            cout << sparse[i][j] << " " ;
        }
        cout << endl;
    }

}

void transpose(int sparse[50][3],int size){
    for(int i=0;i<size;i++){
        int temp = sparse[i][0];
        sparse[i][0] = sparse[i][1];
        sparse[i][1] = temp;
    }
}

int main(){
    int arr[10][10] = {
        {0, 0, 3, 0},
        {22, 0, 0, 0},
        {0, 12, 0, 0},
        {0, 8, 0, 39}
    };

    int rows = 4, cols = 4;
    int sparse[50][3], trans[50][3];

    int size = sparseMatrix(arr, rows, cols, sparse);
    display(sparse,size);
    transpose(sparse,size);
    display(sparse,size);
    return 0;
}

// (B)
// 6) Write a program to implement the following operations on a Sparse Matrix, 
// assuming the matrix is represented using a triplet. 
// (b) Addition of two matrices. 
//
#include <iostream>
using namespace std;

void printSparse(int sparse[100][3]) {
    int nonZero = sparse[0][2];
    cout << "Row Col Val " << endl;
    for (int i = 0; i <= nonZero; i++) {
        cout << sparse[i][0] << " " << sparse[i][1] << " " << sparse[i][2] << endl;
    }
    cout << endl;
}

void addSparse(int A[100][3], int B[100][3], int C[100][3]) {
    if (A[0][0] != B[0][0] || A[0][1] != B[0][1]) {
        cout << "Matrix dimensions do not match. Cannot add!" << endl;
        return;
    }

    int i = 1, j = 1, k = 1;
    int totalA = A[0][2], totalB = B[0][2];
    while (i <= totalA && j <= totalB) {
        if (A[i][0] < B[j][0] || (A[i][0] == B[j][0] && A[i][1] < B[j][1])) {
            C[k][0] = A[i][0];
            C[k][1] = A[i][1];
            C[k][2] = A[i][2];
            i++; 
            k++;
        }
        else if (B[j][0] < A[i][0] || (B[j][0] == A[i][0] && B[j][1] < A[i][1])) {
            C[k][0] = B[j][0];
            C[k][1] = B[j][1];
            C[k][2] = B[j][2];
            j++; 
            k++;
        }
        else {
            int sum = A[i][2] + B[j][2];
            if (sum != 0) {
                C[k][0] = A[i][0];
                C[k][1] = A[i][1];
                C[k][2] = sum;
                k++;
            }
            i++; 
            j++;
        }
    }

    while (i <= totalA) {
        C[k][0] = A[i][0];
        C[k][1] = A[i][1];
        C[k][2] = A[i][2];
        i++; 
        k++;
    }
    while (j <= totalB) {
        C[k][0] = B[j][0];
        C[k][1] = B[j][1];
        C[k][2] = B[j][2];
        j++; 
        k++;
    }

    C[0][0] = A[0][0];
    C[0][1] = A[0][1];
    C[0][2] = k - 1;
}

int main() {
    int A[100][3], B[100][3], C[100][3];
    A[0][0] = 3; A[0][1] = 3; A[0][2] = 3; 
    A[1][0] = 0; A[1][1] = 0; A[1][2] = 1;
    A[2][0] = 1; A[2][1] = 1; A[2][2] = 2;
    A[3][0] = 2; A[3][1] = 2; A[3][2] = 3;

    B[0][0] = 3; B[0][1] = 3; B[0][2] = 3;
    B[1][0] = 0; B[1][1] = 0; B[1][2] = 4;
    B[2][0] = 1; B[2][1] = 2; B[2][2] = 5;
    B[3][0] = 2; B[3][1] = 2; B[3][2] = 6;
    cout << "Sparse Matrix A:\n";
    printSparse(A);
    cout << "Sparse Matrix B:\n";
    printSparse(B);
    addSparse(A, B, C);
    cout << "Resultant Sparse Matrix (A + B):\n";
    printSparse(C);
    return 0;
}

// (C)
#include <iostream>
using namespace std;

void printSparse(int sparse[100][3]) {
    int nonZero = sparse[0][2];
    cout << "Row Col Val";
    for (int i = 0; i <= nonZero; i++) {
        cout << sparse[i][0] << " " << sparse[i][1] << " " << sparse[i][2] << endl;
    }
    cout << endl;
}

void multiplySparse(int A[100][3], int B[100][3], int C[100][3]) {
    if (A[0][1] != B[0][0]) {
        cout << "Matrix multiplication not possible (A.cols != B.rows)" << endl;
        return;
    }

    int rowC = A[0][0], colC = B[0][1];
    int temp[100][3];
    int k = 1;

    for (int i = 1; i <= A[0][2]; i++) {
        for (int j = 1; j <= B[0][2]; j++) {
            if (A[i][1] == B[j][0]) { 
                int row = A[i][0];
                int col = B[j][1];
                int val = A[i][2]*B[j][2];

                int found = 0;
                for (int x = 1; x < k; x++) {
                    if (temp[x][0] == row && temp[x][1] == col) {
                        temp[x][2]+= val;
                        found = 1;
                        break;
                    }
                }
                if (!found) {
                    temp[k][0] = row;
                    temp[k][1] = col;
                    temp[k][2] = val;
                    k++;
                }
            }
        }
    }

    temp[0][0] = rowC;
    temp[0][1] = colC;
    temp[0][2] = k - 1;

    for (int i = 0; i <= temp[0][2]; i++) {
        C[i][0] = temp[i][0];
        C[i][1] = temp[i][1];
        C[i][2] = temp[i][2];
    }
}

int main() {
    int A[100][3], B[100][3], C[100][3];

    A[0][0] = 3; A[0][1] = 3; A[0][2] = 2;
    A[1][0] = 0; A[1][1] = 0; A[1][2] = 1;
    A[2][0] = 1; A[2][1] = 2; A[2][2] = 2;

    // Example Sparse Matrix B (3x3)
    B[0][0] = 3; B[0][1] = 3; B[0][2] = 2;
    B[1][0] = 0; B[1][1] = 1; B[1][2] = 3;
    B[2][0] = 2; B[2][1] = 2; B[2][2] = 4;

    cout << "Sparse Matrix A:\n";
    printSparse(A);
    cout << "Sparse Matrix B:\n";
    printSparse(B);
    multiplySparse(A, B, C);
    cout << "Resultant Sparse Matrix (A * B):\n";
    printSparse(C);
    return 0;
}
